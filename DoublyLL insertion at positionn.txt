#include <iostream>
#include <cstddef>

class Node {
public:
    int data;
    Node *prev;
    Node *next;
    
    Node(int d) {
        this->data = d;
        this->prev = NULL;
        this->next = NULL;
    }
};

void print(Node *head) {
    Node* temp = head;
    while(temp != nullptr) {
        std::cout << temp->data << " ";
        temp = temp->next;
    }
    std::cout << std::endl; 
}


int getlength(Node* head) {
    int len = 0;
    Node* temp = head;
    while(temp != NULL) {
        len++;
        temp = temp->next; 
    }
    return len;
}

void insertathead(Node* &head, Node* &tail, int d) {
    Node* temp = new Node(d);
    temp->next = head;
    if (head != nullptr) {
        head->prev = temp;
    } else {
        tail = temp; // If the list is empty, update tail to the new node
    }
    head = temp;
}


void insertattail(Node* &tail, int d) { 
    Node* temp = new Node(d);
    if (tail == nullptr) {
        // If the list is empty, set both head and tail to the new node
        tail = temp;
        return;
    }
    tail->next = temp;
    temp->prev = tail; 
    tail = temp;
}

void insertatposition(Node* &tail,Node* &head,int position,int d){
    if(position==1){
        insertathead(head,tail,d);
        return;
    }
    Node* temp=head;
    int cnt=1;
    while(cnt<position-1){
        temp=temp->next;
        cnt++;
    }
    if(temp->next==NULL){
        insertattail(tail,d);
        return;
    }
    Node* nodetoinsert =new Node(d);
    nodetoinsert->next=temp->next;
    temp->next->prev=nodetoinsert;
    temp->next=nodetoinsert;
    nodetoinsert->prev=temp;
}


int main() {
    Node *head = nullptr;
    Node *tail = nullptr;
    insertathead(head, tail, 10);
    print(head);
    std::cout << "head" << head->data << std::endl;
    std::cout << "tail" << tail->data << std::endl;
     
    insertatposition(tail, head, 2, 20);
    print(head);
    std::cout << "head" << head->data << std::endl;
    std::cout << "tail" << tail->data << std::endl;

    return 0; 
}											Output:
10 
head10
tail10
10 20 
head10
tail20
